# docker run --privileged --rm tonistiigi/binfmt --install all 
# docker build --platform linux/arm64/v8 -t l241025097/mlc_llm:12.3-arm64 -f Dockerfile_from_source.arm64 .
FROM dockerpull.org/nvidia/cuda:12.3.2-cudnn9-devel-ubuntu22.04
RUN apt-get clean && apt-get install -y apt-transport-https
RUN apt-get update && apt-get install -y git
RUN apt-get install -y wget
RUN apt-get install -y vim
RUN apt-get install -y iputils-ping
RUN apt-get install -y telnet
RUN apt-get install -y traceroute
RUN apt-get install -y libterm-readkey-perl
RUN apt-get install -y locales
RUN apt-get install -y locales-all && locale-gen en_US.UTF-8
RUN echo ":set mouse-=a" > ~/.vimrc
ENV LANG=en_US.UTF-806
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8
ENV TZ=Asia/Shanghai
ENV DEBIAN_FRONTEND=noninteractive
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
RUN apt-get install -y tzdata && dpkg-reconfigure --frontend noninteractive tzdata
RUN apt-get install cron rsyslog -y
RUN apt-get update && apt-get install -y libgl1 libssl-dev libxml2 libxml2-dev rustc cargo
RUN mkdir -p /workspace
ADD modules.tar.gz /workspace
# Miniconda3-py312_24.9.2-0-Linux-aarch64.sh
RUN chmod +x /workspace/modules/Miniconda3-latest-Linux-aarch64.sh
RUN bash /workspace/modules/Miniconda3-latest-Linux-aarch64.sh -b -u -p /opt/miniconda3
RUN /opt/miniconda3/bin/conda create -n tvm_install -c conda-forge "llvmdev>=15" "cmake>=3.24" zlib git python=3.11 -y
WORKDIR /workspace/modules/tvm-unity/build
RUN cp ../cmake/config.cmake .
RUN echo "set(CMAKE_BUILD_TYPE RelWithDebInfo)" >> config.cmake
RUN echo "set(USE_LLVM \"/opt/miniconda3/envs/tvm_install/bin/llvm-config --ignore-libllvm --link-static\")" >> config.cmake
RUN echo "set(HIDE_PRIVATE_SYMBOLS ON)" >> config.cmake
RUN echo "set(USE_CUDA   ON)" >> config.cmake
RUN echo "set(USE_METAL  OFF)" >> config.cmake
RUN echo "set(USE_VULKAN OFF)" >> config.cmake
RUN echo "set(USE_OPENCL OFF)" >> config.cmake
RUN echo "set(USE_FLASHINFER ON)" >> config.cmake
RUN echo "set(FLASHINFER_CUDA_ARCHITECTURES 86)" >> config.cmake
RUN echo "set(CMAKE_CUDA_ARCHITECTURES 86)" >> config.cmake
RUN /opt/miniconda3/envs/tvm_install/bin/cmake ..
RUN /opt/miniconda3/envs/tvm_install/bin/cmake --build . --parallel 8
RUN /opt/miniconda3/bin/conda create -n mlc_install -c conda-forge "cmake>=3.24" rust git python=3.11 -y
WORKDIR /workspace/modules/mlc-llm/build
RUN sh -c '/bin/echo -e "/workspace/modules/tvm-unity\ny\ny\ny\nn\nn\nn\nn\ny\n86\n" | /opt/miniconda3/envs/mlc_install/bin/python3 ../cmake/gen_cmake_config.py'
RUN /opt/miniconda3/envs/mlc_install/bin/cmake ..
RUN /opt/miniconda3/envs/mlc_install/bin/cmake --build . --parallel 8
RUN /opt/miniconda3/bin/conda create -n mlc_llm python=3.11
RUN /opt/miniconda3/bin/conda install -n mlc_llm -c conda-forge git-lfs
RUN /opt/miniconda3/bin/conda install -n mlc_llm -c conda-forge libgcc-ng
RUN /opt/miniconda3/envs/mlc_llm/bin/python3 -m pip install --upgrade pip
RUN /opt/miniconda3/envs/mlc_llm/bin/python3 -m pip config set global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple
RUN cd /workspace/modules/tvm-unity/python && /opt/miniconda3/envs/mlc_llm/bin/python3 -m pip install -e .
RUN cd /workspace/modules/mlc-llm/python && /opt/miniconda3/envs/mlc_llm/bin/python3 -m pip install -e .
RUN /opt/miniconda3/bin/conda install -n mlc_llm -c conda-forge sentencepiece
RUN /opt/miniconda3/bin/conda install -n mlc_llm -c conda-forge protobuf
WORKDIR /workspace
